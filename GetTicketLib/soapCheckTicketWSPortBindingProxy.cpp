/* soapCheckTicketWSPortBindingProxy.cpp
   Generated by gSOAP 2.8.49 for ./natappfree.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapCheckTicketWSPortBindingProxy.h"

CheckTicketWSPortBindingProxy::CheckTicketWSPortBindingProxy() : soap(SOAP_IO_DEFAULT)
{	CheckTicketWSPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

CheckTicketWSPortBindingProxy::CheckTicketWSPortBindingProxy(const CheckTicketWSPortBindingProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

CheckTicketWSPortBindingProxy::CheckTicketWSPortBindingProxy(const struct soap &_soap) : soap(_soap)
{ }

CheckTicketWSPortBindingProxy::CheckTicketWSPortBindingProxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	CheckTicketWSPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

CheckTicketWSPortBindingProxy::CheckTicketWSPortBindingProxy(soap_mode iomode) : soap(iomode)
{	CheckTicketWSPortBindingProxy_init(iomode, iomode);
}

CheckTicketWSPortBindingProxy::CheckTicketWSPortBindingProxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	CheckTicketWSPortBindingProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

CheckTicketWSPortBindingProxy::CheckTicketWSPortBindingProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	CheckTicketWSPortBindingProxy_init(imode, omode);
}

CheckTicketWSPortBindingProxy::~CheckTicketWSPortBindingProxy()
{
	this->destroy();
	}

void CheckTicketWSPortBindingProxy::CheckTicketWSPortBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns1", "http://com.nona.check/", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
CheckTicketWSPortBindingProxy *CheckTicketWSPortBindingProxy::copy()
{	CheckTicketWSPortBindingProxy *dup = SOAP_NEW_COPY(CheckTicketWSPortBindingProxy(*(struct soap*)this));
	return dup;
}
#endif

CheckTicketWSPortBindingProxy& CheckTicketWSPortBindingProxy::operator=(const CheckTicketWSPortBindingProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void CheckTicketWSPortBindingProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void CheckTicketWSPortBindingProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	CheckTicketWSPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void CheckTicketWSPortBindingProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *CheckTicketWSPortBindingProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *CheckTicketWSPortBindingProxy::soap_fault()
{	return this->fault;
}

const char *CheckTicketWSPortBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *CheckTicketWSPortBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int CheckTicketWSPortBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

int CheckTicketWSPortBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void CheckTicketWSPortBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void CheckTicketWSPortBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *CheckTicketWSPortBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int CheckTicketWSPortBindingProxy::getTicketInfo(const char *endpoint, const char *soap_action, const std::string& arg0, struct ns1__getTicketInfoResponse &_param_1)
{	struct soap *soap = this;
	struct ns1__getTicketInfo soap_tmp_ns1__getTicketInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://v6dutm.natappfree.cc/klmy";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp_ns1__getTicketInfo.arg0 = arg0;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_ns1__getTicketInfo(soap, &soap_tmp_ns1__getTicketInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTicketInfo(soap, &soap_tmp_ns1__getTicketInfo, "ns1:getTicketInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTicketInfo(soap, &soap_tmp_ns1__getTicketInfo, "ns1:getTicketInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<struct ns1__getTicketInfoResponse*>(&_param_1)) // NULL ref?
		return soap_closesock(soap);
	soap_default_ns1__getTicketInfoResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getTicketInfoResponse(soap, &_param_1, "ns1:getTicketInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
